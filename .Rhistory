runApp()
runApp()
runApp()
runApp()
runApp()
ANOVA
summary(ANOVA)
library(agricolae)
install.packages(agricolae)
install.packages('agricolae')
install.packages("agricolae")
data(sweetpotato)
model<-aov(yield~virus,data=sweetpotato)
out <- duncan.test(model,"virus",
main="Yield of sweetpotato. Dealt with different virus")
library(agricolae)
data(sweetpotato)
model<-aov(yield~virus,data=sweetpotato)
out <- duncan.test(model,"virus",
main="Yield of sweetpotato. Dealt with different virus")
out
plot(out,variation="IQR")
duncan.test(model,"virus",alpha=0.01,console=TRUE)
citation('agricolae')
citation('EnvStats')
citation('outliers')
plot(out)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('Dunnett')
install.packages('PMCMRplus')
citation('PMCMRplus')
install.packages('PMCMRplus')
citation('PMCMRplus')
install.packages('PMCMRplus')
install.packages('Rmpfr')
install.packages('Rmpfr')
install.packages('Rmpfr')
devtools::install_github('https://github.com/cran/Rmpfr')
runApp()
runApp()
(data <- round(rnorm(8, 0.4, 0.1), 2))
set.seed(1)
(data <- round(rnorm(8, 0.4, 0.1), 2))
t.test(x = HgTot, mu = 0.5, alternative = 'less')
(HgTot <- round(rnorm(8, 0.4, 0.1), 2)) #g kg^-1
set.seed(1)
(HgTot <- round(rnorm(8, 0.4, 0.1), 2)) #g kg^-1
set.seed(1)
(HgTot <- round(rnorm(8, 0.45, 0.1), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(1)
(HgTot <- round(rnorm(8, 0.45, 0.05), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(1)
(HgTot <- round(rnorm(8, 0.47, 0.05), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(1)
(HgTot <- round(rnorm(8, 0.47, 0.03), 2)) #g kg^-1
set.seed(2)
(HgTot <- round(rnorm(8, 0.47, 0.03), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(2)
(HgTot <- round(rnorm(8, 0.47, 0.04), 2)) #g kg^-1
set.seed(2)
(HgTot <- round(rnorm(8, 0.48, 0.04), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(10)
(HgTot <- round(rnorm(8, 0.47, 0.04), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(6)
(HgTot <- round(rnorm(8, 0.47, 0.04), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(6)
(HgTot <- round(rnorm(8, 0.47, 0.035), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(6)
(HgTot <- round(rnorm(8, 0.47, 0.03), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
set.seed(6)
(HgTot <- round(rnorm(8, 0.47, 0.03), 2)) #g kg^-1
t.test(x = HgTot, mu = 0.5, alternative = 'less')
t.test(x = HgTot, mu = 0.5)
t.test(x = HgTot, mu = 0.5, alternative = 'less')
t.test(x = HgTot, mu = 0.5)
t.test(x = HgTot, mu = 0.5, alternative = 'less')
runApp()
set.seed(6)
(HgTot <- round(rnorm(8, 470, 30), 2)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(6)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(8)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(10)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(11)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(12)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(13)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(14)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(15)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(16)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(17)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(18)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(19)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(20)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(21)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(22)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(23)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
set.seed(24)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(25)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(26)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
set.seed(27)
(HgTot <- round(rnorm(8, 470, 30), 0)) #g kg^-1
t.test(x = HgTot, mu = 500, alternative = 'less')
runApp()
t.test(x = HgTot, mu = 500, alternative = 'less')
runApp()
shapiro.test(HgTot)
pi
curve(y ~ (1/(sqrt(2*pi))))
curve(y ~ ((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2))))
curve(((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2)))
curve(function(x) ((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2))))
curve(function(x) ((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2))), n = 500)
curve(function(x) ((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2))), -400, 600)
curve(((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2))), -400, 600)
curve(((1/(sqrt(2*pi*sd(HgTot)^2)))*exp(-((x-500)^2)/(2*sd(HgTot)^2))), 400, 600)
(p4 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.2, xlim = c(0, 1)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.7, xlim = c(0.16, 0.84)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", xlim = c(0.33, 0.67)) +
geom_function(fun = dnorm, args = list(mean = 0.5, sd = .17)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"), legend.position = "none") +
scale_x_continuous(name = NULL, expand = c(0, 0), breaks = NULL) +
scale_y_continuous(name = NULL, expand = c(0, 0), limits = c(0, 3.4), breaks = NULL) +
annotate(geom = "segment", x = c(0.33, 0.16), xend = c(0.67, 0.84), y = c(2.4, 2.95), yend = c(2.4, 2.95),
arrow = arrow(ends = "both")) +
annotate(geom = "segment", x = 0.5, xend = 0.5, y = 0, yend = 2.35, linetype = "dotted") +
annotate(geom = "segment", x = c(0.33, 0.67), xend = c(0.33, 0.67), y = 0, yend = 2.5, linetype = "dashed") +
annotate(geom = "segment", x = c(0.16, 0.84), xend = c(0.16, 0.84), y = 0, yend = 3.05, linetype = "dashed") +
annotate(geom = "text", x = 0.5, y = c(2.7, 3.15), size = 8,
label = c(expression(paste(bar(x), ' ± s = 66%')), expression(paste(bar(x), ' ± 2s = 95%')))))
#source('functions.R')
#Media aritmética
(p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.3, xlim = c(0, 1)) +
geom_function(fun = dnorm, args = list(mean = 0.5, sd = .17)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"), legend.position = "none") +
scale_x_continuous(name = NULL, expand = c(0, 0), breaks = NULL) +
scale_y_continuous(name = NULL, expand = c(0, 0), limits = c(0, 2.8), breaks = NULL) +
annotate(geom = "segment", x = 0.5, xend = 0.5, y = 0, yend = 2.35) +
annotate(geom = "text", x = 0.52, y = 2.48, size = 9, label = bquote(bar(x))))
#source('functions.R')
#Media aritmética
(p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.3, xlim = c(0, 1)) +
geom_function(fun = dnorm, args = list(mean = 0.5, sd = .17)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"), legend.position = "none") +
scale_x_continuous(name = NULL, expand = c(0, 0), breaks = NULL) +
scale_y_continuous(name = NULL, expand = c(0, 0), limits = c(0, 2.8), breaks = NULL) +
annotate(geom = "segment", x = 0.5, xend = 0.5, y = 0, yend = 2.35) +
annotate(geom = "text", x = 0.52, y = 2.48, size = 9, label = bquote(bar(x))))
library(ggplot2)
#source('functions.R')
#Media aritmética
(p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.3, xlim = c(0, 1)) +
geom_function(fun = dnorm, args = list(mean = 0.5, sd = .17)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"), legend.position = "none") +
scale_x_continuous(name = NULL, expand = c(0, 0), breaks = NULL) +
scale_y_continuous(name = NULL, expand = c(0, 0), limits = c(0, 2.8), breaks = NULL) +
annotate(geom = "segment", x = 0.5, xend = 0.5, y = 0, yend = 2.35) +
annotate(geom = "text", x = 0.52, y = 2.48, size = 9, label = bquote(bar(x))))
p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x))
p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.3, xlim = c(0, 1)) +
geom_function(fun = dnorm, args = list(mean = 0.5, sd = .17))
p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.3, xlim = c(0, 1))
p1 <- ggplot(data.frame(x = seq(0, 1, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dnorm, args = list(mean = 0.5, sd = 0.17), fill = "#97d7e4", alpha = 0.3, xlim = c(0, 1)) +
geom_function(fun = dnorm, args = list(mean = 0.5, sd = .17))
ensure_nonempty_data
install.packages('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
(p7 <-   ggplot(data.frame(x = seq(-5, 5, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dlogis, args = list(scale = .5), fill = "#97d7e4", alpha = 0.3, xlim = c(-5, 5)) +
geom_area(stat = "function", fun = dlogis, fill = "#97d7e4", alpha = 0.3, xlim = c(-5, 5)) +
geom_area(stat = "function", fun = dlogis, args = list(scale = 2), fill = "#97d7e4", alpha = 0.3, xlim = c(-5, 5)) +
geom_function(fun = dlogis, args = list(scale = .5)) +
geom_function(fun = dlogis) + geom_function(fun = dlogis, args = list(scale = 2)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"), legend.position = "none") +
scale_x_continuous(name = NULL, breaks = NULL, expand = c(0, 0)) +
scale_y_continuous(name = NULL, expand = c(0, 0), limits = c(0, 0.6), breaks = NULL) +
annotate(geom = 'text', x = 2.1, y = 0.4, label = 'Leptocúrtica', size = 8) +
annotate(geom = 'text', x = 2.4, y = 0.17, label = 'Meso~', size = 8) +
annotate(geom = 'text', x = 4, y = 0.1, label = 'Plato~', size = 8))
library(ggplot2)
(p7 <-   ggplot(data.frame(x = seq(-5, 5, 1)), aes(x = x)) +
geom_area(stat = "function", fun = dlogis, args = list(scale = .5), fill = "#97d7e4", alpha = 0.3, xlim = c(-5, 5)) +
geom_area(stat = "function", fun = dlogis, fill = "#97d7e4", alpha = 0.3, xlim = c(-5, 5)) +
geom_area(stat = "function", fun = dlogis, args = list(scale = 2), fill = "#97d7e4", alpha = 0.3, xlim = c(-5, 5)) +
geom_function(fun = dlogis, args = list(scale = .5)) +
geom_function(fun = dlogis) + geom_function(fun = dlogis, args = list(scale = 2)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"), legend.position = "none") +
scale_x_continuous(name = NULL, breaks = NULL, expand = c(0, 0)) +
scale_y_continuous(name = NULL, expand = c(0, 0), limits = c(0, 0.6), breaks = NULL) +
annotate(geom = 'text', x = 2.1, y = 0.4, label = 'Leptocúrtica', size = 8) +
annotate(geom = 'text', x = 2.4, y = 0.17, label = 'Meso~', size = 8) +
annotate(geom = 'text', x = 4, y = 0.1, label = 'Plato~', size = 8))
shiny::runApp()
shiny::runApp()
citation('shinydashboard')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Dropbox/transmem_shinyapp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(transmem)
runApp()
transmem::curvelithium
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rep(1:3, each = 2:4)
allVectors <- data.frame(x = c(A1, A2, A3, A4, A5), group = as.factor(c(rep(1, 6), rep(2, 5), rep(3, 5), rep(4, 7), rep(5, 6))))
set.seed(0)
A1 <- rnorm(6, 105, 4)
A2 <- rnorm(5, 100, 6)
A3 <- rnorm(5, 115, 3)
A4 <- rnorm(7, 96, 7)
A5 <- rnorm(6, 90, 5)
allVectors <- data.frame(x = c(A1, A2, A3, A4, A5), group = as.factor(c(rep(1, 6), rep(2, 5), rep(3, 5), rep(4, 7), rep(5, 6))))
allVectors
str(allVectors)
anova(x ~ group, data = allVectors)
anova(lm(x ~ group), data = allVectors)
anova(lm(x ~ group), allVectors)
anova(lm(x ~ group, allVectors))
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
x <- rnorm(20)
shapiro.test(x)
shapiro.test(x) -> sw
str(sw)
sw$method
runApp()
runApp()
ks.test(rnorm(50))
ks.test(rnorm(50), y = 'pnorm')
ks.test(rnorm(5), y = 'pnorm')
signif(5.5)
signif(5.5555)
runApp()
runApp()
x<- ks.test(rnorm(50), y = 'pnorm')
a
x
a
a
aa
x
str(x)
outliers::grubbs.test(rnorm(50), type = 10)
str(outliers::grubbs.test(rnorm(50), type = 10))
runApp()
runApp()
runApp('~/Dropbox/transmem_shinyapp')
runApp('~/Dropbox/transmem_shinyapp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(t.test(x=rnorm(5), mu = 3))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
citation(outliers)
citation('outliers')
runApp()
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
runApp()
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
runApp()
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
install.packages('faraway')
require(faraway)
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
library(agricolae)
data(sweetpotato)
model<-aov(yield~virus, data=sweetpotato)
out <- LSD.test(model,"virus", p.adj="bonferroni")
#stargraph
# Variation range: max and min
plot(out)
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
require(graphics)
summary(fm1 <- aov(breaks ~ wool + tension, data = warpbreaks))
TukeyHSD(fm1, "tension", ordered = TRUE)
plot(TukeyHSD(fm1, "tension"))
TukeyHSD(fm1, "tension", ordered = TRUE)
TukeyHSD(fm1, "tension", ordered = TRUE)
->xx
TukeyHSD(fm1, "tension", ordered = TRUE)->xx
xx
xx$tension
xx$tension[, 4]
names(xx$tension[, 4])
rownames(xx$tension)
xx$tension[, 4]<=0.05
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
runApp()
runApp()
library(agricolae)
data(sweetpotato)
model<-aov(yield~virus,data=sweetpotato)
out <- duncan.test(model,"virus",
main="Yield of sweetpotato. Dealt with different virus")
plot(out)
plot(out, main = 'Duncan')
out
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
runApp()
runApp()
x1 <- ('es diferente')
x1
runApp()
runApp()
runApp()
runApp()
summary(fm1 <- aov(breaks ~ wool + tension, data = warpbreaks))
TukeyHSD(fm1, "tension", ordered = TRUE)
runApp()
TukeyHSD(fm1, "tension", ordered = TRUE)$tension[,4] <= (1-0.95)
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Dropbox/0-INM/validaR_shinyapp/Layouts/lyPruebasComparacion.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
